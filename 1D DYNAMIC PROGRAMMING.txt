1D DYNAMIC PROGRAMMING


1. CLIIMBING STAIRS


def countWays(n):
    """
    start from the last (n), we will always have 1 way
    To go from n-1 to n--> again only 1 way possible
    To go from n-2 to n--> it will depend on n-1, n (their sum)
    Thus we can use an dp array to store all the values,
    dp[n] = dp[n+1] + dp[n+2]
    OR we can use 2 variable, as we only need n+1, n+2 values for the ans
    """
    
    one, two = 1, 1
    
    for i in range(n-1):
        temp = one
        one += two
        two = temp
    
    return one


# print(countWays(3))

--------------------------------------------------------------------------------------

2. MIN COST CLIMBING STAIRS


def minCost(arr):
    """
    start from n-1 --> cost arr[n-1] to get to top
    start from n-2 --> cost = min(arr[n-1], arr[n-2]+arr[n-1])
    i.e in 1 steps or 2 steps
    So for index n, we can take a single or double step
    Thus, for any index n, cost = min(dp[n+1]+dp[n], dp[n+2]+dp[n])
    return min(dp[0], dp[1])

    To reduce the space, take two variables and update them
    rather than storing in an array
    """
    
    n = len(arr)
    dp = [0] * n
    dp[n-1] = arr[n-1]
    dp[n-2] = arr[n-2]
    
    for i in range(n-3, -1, -1):
        dp[i] = arr[i] + min(dp[i+1], dp[i+2])

    return min(dp[0], dp[1])

arr = [1,100,1,1,1,100,1,1,100,1]
print(minCost(arr))

------------------------------------------------------------------------------------------

3. HOUSE ROBBER

def rob(arr):
    """
    Consider if we have 1 house, we will either rob it or not rob it
    Thus cost = max(0, house[0])
    Now if we have 2 houses, due to given condition
    cost = max(house[0], house[1]) i.e rob either one of them
    So we now have max amount we can rob till first two houses

    Now if n = 3, we can either rob house[2](n-1)--> cost = max(house[2], house[2-2])
    as we cannort rob adjacent houses OR cost = max up to two houses i.e house[1]

    Thus we can keep storing max amount to rob till each house and return the max amount 
    in the end
    """
    n = len(arr)
    dp = [0] * n
    dp[0], dp[1] = arr[0], max(arr[0],arr[1])
    for i in range(2, n):
        dp[i] = max(arr[i]+dp[i-2], dp[i-1])
    
    return dp[n-1]
    
    """
    To reduce the space, since we are only using the last 2  values from the dp
    We can use only 2 variables and keep on updating them
    """
    # rob1, rob2 = 0, 0
    # for el in arr:
    #     temp = max(el+rob1, rob2)
    #     rob1 = rob2
    #     rob2 = temp
    
    # return rob2
arr = [1,2,3,1]
arr1 = [2,7,9,3,1]
print(rob(arr1))
----------------------------------------------------------------------------------------------------

4. LONGEST PALINDROMIC SUBSTRING

"""
Briute Force Solution is to take each char, then iterate over the 
remaining string and check whether its a palidromre or not
This approach would take O(n^3) Time

Little Optimization
We can consider each letter to be the center and then expand outwards 
to check for the palindrome. This will reduce our time complexity to
O(n^2). But we will have to handle the edge case of even palindromes
"""


def longestPal(text):
    resl = ""
    resLen = 0
    
    for i in range(len(text)):
        # Odd length
        l, r = i, i
        while l >= 0 and r < len(text) and text[l] == text[r]:
            if (r-l + 1) > resLen:
                resl = text[l:r+1]
                resLen = r-l + 1
            l -= 1
            r += 1
        
        # Even Length
        l, r = i, i+1
        while l >= 0 and r < len(text) and text[l] == text[r]:
            if (r-l + 1) > resLen:
                resl = text[l:r+1]
                resLen = r-l + 1
            l -= 1
            r += 1

    return resl

print(longestPal("babad"))
print(longestPal("cbbd"))


--------------------------------------------------------------------------------------


5. COUNT PALINDROMES

"""
Approach is similar to above one
"""
def countPalindromes(s: str) -> int:
    res = 0
    for i in range(len(s)):
        l = r = i
        while l >= 0 and r < len(s) and s[l] == s[r]:
            res += 1
            l -= 1
            r += 1
        
        l = i
        r = i + 1
        while l >= 0 and r < len(s) and s[l] == s[r]:
            res += 1
            l -= 1
            r += 1
    return res

print(countPalindromes("aaa"))

-------------------------------------------------------------------------------------

6. DECODE WWAYS

GIVEN A-1, B-2, C-3.....,Z-26 AS MAPPING
THEN GIVEN A NUMBER (EX: 12), GIVE THE NUMBER OF WAYS IT CAN BE DECODED
LIKE 12 --- K OR AB

# recursive
"""
In this approach, we can either take single char or two char at a time and map them and count.
The edge cases are if starting char for each recursive call is 0 or if last char if greater than 
6 when char before it is 2
Base case is when we reach end of string
Ex 121--> First Take 1 or 12. 
If 1 then take 2 or 21
If 2 then take 1 
If 1 --> Base Case return 1
If 21 --> Base Case return 1
If 12 then take 1
If 1 --> Base Case return 1
Total Ways = 3

To Reduce the nUmber of Recursive Calls , Use Caching
"""
def numDecodings(s):
    # as we reach end of string, we will return 1
    dp = { len(s) : 1 }

    def rec(i):
        if i in dp:
            return dp[i]
        
        if s[i] == "0":
            return 0
        
        res = rec(i+1)
        if (i + 1 < len(s)) and (s[i] == "1" or (s[i] == "2" and s[i+1] in "0123456")):
            res += rec(i+2)
        
        dp[i] = res
        return res

    return rec(0)

print(numDecodings("226"))

# DP Approach
def numDecodings1(s):
    """
    Here we can use a dp cache where len(s) correspopnds to 1
    Now we will move from end to start
    For each char 
        if char == "0" then dp[i] = 0
        else dp[i] = dp[i+1]
        
        And if the char == 1 and i+1 b/w 0-9 or char == 2 and i+1 b/w 0-6
        Then dp[i] += dp[i+2]

    Finally Return Dp[0] 
    """
    n = len(s)
    dp = [0]*(n+1)
    dp[n] = 1

    for i in range(n-1, -1, -1):
        if s[i] == "0":
            dp[i] = 0
        else:
            dp[i] = dp[i+1]

        if i+1 < n and (s[i] == "1" or (s[i] == "2" and s[i+1] in "0123456")):
            dp[i] += dp[i+2]
    
    return dp[0]

print(numDecodings("226"))

---------------------------------------------------------------------------------------

7. COIN CHANGE

GIVEN THE COINS ARRAY = [1,2,3,4] OR SOMETHING, CALCULATE THE MIN NUMBER OF COINS THAT CAN BE USED
TO SUM UP A GIVEN AMOUNT

EX [1,3,4,5], AMOUNT = 11 ---> MIN COINS = 3


## RECURSIVE SOLUTION NOT FOUND


# BOTTOM Up DP

def countChange(coins, amt):
    """
    Bottom Up DP Approach
    We try and calculate min coins needed to get an amt i
    Ex if needed amt = 5 and we have coins[1,3]
    dp[5] = min(dp[5], 1+dp[5-1], 1+dp[5-3])
    """
    dp = [amt+1] * (amt + 1)
    dp[0] = 0

    for a in range(1, amt+1):
        for c in coins:
            if a-c >= 0:
                dp[a] = min(dp[a], 1+dp[a-c])

    return dp[amt] if dp[amt] != amt+1 else -1


coins = [1,2,5]
amount = 11
print(countChange(coins, amount))

--------------------------------------------------------------------------------------------------------

8. WORD BREAK

APPROACH (RECURSIVE AND CACHING):
ITERTATE OVER THE WORD_LIST AND TREAT EACH WORD AS A DECISION FOR THE TREE
INITIALLY I = 0 AND WE START COMPARING EACH WORD AND PREFIX
IF E ENCOUNTER A FALSE WE CACHE THAT INDEX I IT FOR FUTURE USE
BASE CASE: IF WE REACH THE END OF THE STRING

FUN(S, I, LST):
IF I == LEN(S):
	RETURN TRUE

FOR WORD IN LST:
	IF WORD == S[I:I+LEN(WORD)+1]:
		F(S, I+LEN(WORD), LST)

RETURN FALSE


APPROACH (BOTTOM UP)
DP[LEN(s)] = TRUE
THEN FOR EACH INDEX FROM END IF WORD FROM LST EXISTS IN GIVEN STRING
DP[I] = DP[I+LEN(WORD)]
AND DP[0] WILL BE OUR RESULT

def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dp = [False] * (len(s) + 1)
        dp[len(s)] = 1 

        for i in range(len(s)-1, -1, -1):
            for w in wordDict:
                if i+len(w) <= len(s) and s[i:i+len(w)] == w:
                    dp[i] = dp[i+len(w)]
                if dp[i]:
                    break
                    
        return dp[0]

---------------------------------------------------------------------------------------------------

9. LONGEST INCREASING SUBSEQUENCE


APPROACH(BRUTE FORCE DFS)
FOR EACH EL IN THE ARRAY WE HAVE A CHOICE
TO INCLUDE IT OR NOT INCLUDE
THUS WE GET 2^N TC


APPROACH(DP):
DP[LAST_IDX] = 1
DP[LAST_IDX - 1] = max(1, 1+DP[LST_IDX]) IF NUMS[LAST_IDX-1] < NUMS[LAST_IDX] ELSE 1
THIS IS FOR EVERY INCREASING PAIR (I.E 2 LOOPS)

THIS CAN BUILT FROM THE RECURSION TREE
WHEN WE REACH THE LAST INDEX OF NUMS, OUR ONLY OPTION FOR SUBSEQUENCE IS 1
FOR ONE INDEX BEFORE IT WE WILL HAVE TO CHECK FOR IF THE NEXT INDEX SATIFIES THE INCREASING CRITERIA
THIS WILL BE THE DECISION MADE ON EVERY INDEX AND EVERY OTHER INDEX AFTER THAT INDEX
I.E FOR I WE CHECK WITH I+1, I+2,...

CONVERTING IT TO DP
DP = [1] * N
DP[LEN(NUMS] = 1
FOR I FROM N-1 TO 0
   FOR J FROM I+1 TO N
	IF NUMS[I] < NUMS[J]
	   DP[I] = MAX(DP[I], 1+DP[J])

RETURN MAX(DP)

def lengthOfLIS(self, nums: List[int]) -> int:
        dp = [1] * len(nums)

        for i in range(len(nums)-1, -1, -1):
            for j in range(i+1, len(nums)):
                if nums[i] < nums[j]:
                    dp[i] = max(dp[i], 1+dp[j])

        return max(dp)

----------------------------------------------------------------------------------------------------

10. PARITION EQUAL SUBSET SUM


APPROACH(BRUTE FORCE RECURSION)
TO DIVIDE THE ARRAY INTO TWO SUBSETS OF EQUAL SUM THE SUM OF EACH PART 
SHOULD BE SUM(ARRAY)//2
SO WE NEED TO CREATE A SUBSET WITH TARGET SUM OF SUM(ARRAY)/2

FOR EACH ELEMENT WE CAN EITHER TAKE IT OR NOT TAKE IT
THIS LEAD TO A RECURSIVE SOLUTION OF TC 2^N FOR N DECISION LEVELS

REC(I, TARGET):
IF TARGET == 0:
	RETURN TRUE

IF REC(I+1, TARGET-ARR[I]):
	RETURN TRUE
REC(I+1, TARGET)
RETURN FALSE

WE OPTIMIZE THIS CACHING THE SOLUTION
I.E CACHING THE SUM FOR INDEXES
TC O(N*SUM(ARRAY))


APPROACH(DP)
WE WILL START FROM THE END OF THE ARRAY
WE CREATE A SET AS OUR CHACHE OR DP
FOR I FROM N-1 TO 0:
    FOR EL IN DP:
	IF EL + NUMS[I] == TARGET:
            RETURN TRUE

	ADD EL + NUMS[I] TO THE DP
	(MAINTAIN THE ORIGINAL DP ANY WAY POSSIBLE)

RETURN TRUE IF TARGET IN DP ELSE FALSE

THE SPACE COMPLEXITY IS O(N*SUM(ARRAY)) WHICH IS ALSO THE TC

def canPartition(self, nums: List[int]) -> bool:
        if sum(nums) % 2 != 0:
            return False
        
        dp = set()
        dp.add(0)
        target = sum(nums) // 2

        for i in range(len(nums) - 1, -1, -1):
            nextDp = set()
            for t in dp:
                if (t + nums[i]) == target:
                    return True

                nextDp.add(t + nums[i])
                nextDp.add(t)
            dp = nextDp
        
        return True if target in dp else False

----------------------------------------------------------------------------------------------------